name:"PerceptualLossGuidedDehazing"

#input layers
input: "data"
input_dim: 1
input_dim: 3
input_dim:{height}
input_dim:{width}

input: "label"
input_dim: 1
input_dim: 3
input_dim:{height}
input_dim:{width}


#Network definition
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  #learning rate and decay multipliers for the filters, values used in alexnet example model
  param {
	lr_mult:1
	decay_mult:1
  }
  #learning rate and decay multipliers for the bias, values used in alexnet example model
  param {
	lr_mult:2
	decay_mult:0
  }
  convolution_param {
    num_output: 3		#filter number
    kernel_size: 1		#kernel size: 1x1
	weight_filler {	
	  type: "gaussian"	#initialize the filters from a Gaussian
	  std: 0.01 
	}
    bias_filler {
	  type: "constant"  #initialize the bias to 0 (or some small value numbers like 0.1)
	  value: 0
	}
  }
}

layer {
   name: "relu1"
   type: "ReLU"
   bottom: "conv1"
   top: "conv1"
 }

 layer {
  name: "conv2"
  type: "Convolution"
  bottom: "conv1"
  top: "conv2"
  #learning rate and decay multipliers for the filters, values used in alexnet example model
  param {
	lr_mult:1
	decay_mult:1
  }
  #learning rate and decay multipliers for the bias, values used in alexnet example model
  param {
	lr_mult:2
	decay_mult:0
  }
  convolution_param {
    num_output: 3
    kernel_size: 3
    pad:1
	weight_filler {	
	  type: "gaussian"	#initialize the filters from a Gaussian
	  std: 0.01 
	}
    bias_filler {
	  type: "constant"  #initialize the bias to 0 (or some small value numbers like 0.1)
	  value: 0.1
	}
  }
}

layer {
   name: "relu2"
   type: "ReLU"
   bottom: "conv2"
   top: "conv2"
 }

layer {
  name: "Concat1"
  type: "Concat"
  bottom: "conv1"
  bottom: "conv2"
  top: "Concat1"
  concat_param {
    axis: 1
  }
}

 layer {
  name: "conv3"
  type: "Convolution"
  bottom: "Concat1"
  top: "conv3"
  #learning rate and decay multipliers for the filters, values used in alexnet example model
  param {
	lr_mult:1
	decay_mult:1
  }
  #learning rate and decay multipliers for the bias, values used in alexnet example model
  param {
	lr_mult:2
	decay_mult:0
  }
  convolution_param {
    num_output: 3
    kernel_size: 5
    pad:2
  	weight_filler {	
	  type: "gaussian"	#initialize the filters from a Gaussian
	  std: 0.01 
	}
    bias_filler {
	  type: "constant"  #initialize the bias to 0 (or some small value numbers like 0.1)
	  value: 0.1
	}
  }
}

layer {
   name: "relu3"
   type: "ReLU"
   bottom: "conv3"
   top: "conv3"
 }

layer {
  name: "Concat2"
  type: "Concat"
  bottom: "conv2"
  bottom: "conv3"
  top: "Concat2"
  concat_param {
    axis: 1
  }
}

 layer {
  name: "conv4"
  type: "Convolution"
  bottom: "Concat2"
  top: "conv4"
  #learning rate and decay multipliers for the filters, values used in alexnet example model
  param {
	lr_mult:1
	decay_mult:1
  }
  #learning rate and decay multipliers for the bias, values used in alexnet example model
  param {
	lr_mult:2
	decay_mult:0
  }
  convolution_param {
    num_output: 3
    kernel_size: 7
    pad:3
  	weight_filler {	
	  type: "gaussian"	#initialize the filters from a Gaussian
	  std: 0.01 
	}
    bias_filler {
	  type: "constant"  #initialize the bias to 0 (or some small value numbers like 0.1)
	  value: 0.1
	}
  }
}

layer {
   name: "relu4"
   type: "ReLU"
   bottom: "conv4"
   top: "conv4"
 }

 layer {
  name: "Concat3"
  type: "Concat"
  bottom: "conv1"
  bottom: "conv2"
  bottom: "conv3"
  bottom: "conv4"
  top: "Concat3"
  concat_param {
    axis: 1
  }
}

layer {
  name: "conv5"
  type: "Convolution"
  bottom: "Concat3"
  top: "conv5"
  #learning rate and decay multipliers for the filters, values used in alexnet example model
  param {
	lr_mult:1
	decay_mult:1
  }
  #learning rate and decay multipliers for the bias, values used in alexnet example model
  param {
	lr_mult:2
	decay_mult:0
  }
  convolution_param {
    num_output: 3
    kernel_size: 3
    pad:1
    weight_filler {	
	  type: "gaussian"	#initialize the filters from a Gaussian
	  std: 0.01 
	}
    bias_filler {
	  type: "constant"  #initialize the bias to 0 (or some small value numbers like 0.1)
	  value: 0.1
	}
  }
}

layer {
   name: "relu5"
   type: "ReLU"
   bottom: "conv5"
   top: "K"
 }

layer {
  name: "prod"
  type: "Eltwise"
  bottom: "data"
  bottom: "K"
  top: "prod"
  eltwise_param {
    operation: PROD
  }
}

layer {
 name:"eltwise_layer"
 type:"Eltwise"
 bottom:"prod"
 bottom:"K"
 top:"eltwise_layer"
 eltwise_param{
   operation:SUM
   coeff:1
   coeff:-1
 }
}


layer {
  name: "sum"
  bottom: "eltwise_layer"
  top: "sum"
  type: "Power"
  power_param {
    power: 1
    scale: 1
    shift: 1
  }
}

layer {
   name: "clip"
   type: "ReLU"
   bottom: "sum"
   top: "sum"
}

layer {
  name: "loss"
  type: "EuclideanLoss"
  bottom: "sum"
  bottom: "label"
  top: "loss"
}


